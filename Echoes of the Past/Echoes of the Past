<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Echoes of the Past</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
            box-sizing: border-box;
        }
        .game-container {
            background-color: #2d3748; /* Slightly lighter dark background for container */
            border-radius: 1rem;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.5);
            max-width: 900px;
            width: 100%;
            display: grid;
            grid-template-columns: 2fr 1fr; /* Main content and sidebar */
            gap: 1.5rem;
            padding: 2rem;
            border: 1px solid #4a5568;
        }
        .main-content {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .sidebar {
            background-color: #1a202c;
            border-radius: 0.75rem;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            border: 1px solid #4a5568;
        }
        .section-title {
            font-weight: bold;
            color: #a0aec0;
            margin-bottom: 0.5rem;
        }
        .button {
            padding: 0.75rem 1.25rem;
            border-radius: 0.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            text-align: center;
        }
        .button-primary {
            background-color: #63b3ed; /* Blue */
            color: #1a202c;
        }
        .button-primary:hover {
            background-color: #4299e1;
            transform: translateY(-1px);
        }
        .button-secondary {
            background-color: #4a5568; /* Darker gray */
            color: #e2e8f0;
        }
        .button-secondary:hover {
            background-color: #2d3748;
            transform: translateY(-1px);
        }
        .object-item, .clue-item {
            background-color: #4a5568;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .object-item:last-child, .clue-item:last-child {
            margin-bottom: 0;
        }
        .message-log {
            background-color: #1a202c;
            border-radius: 0.75rem;
            padding: 1.5rem;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #4a5568;
        }
        .message-log p {
            margin-bottom: 0.5rem;
            line-height: 1.4;
        }
        .message-log p:last-child {
            margin-bottom: 0;
        }
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal.show {
            opacity: 1;
            visibility: visible;
        }
        .modal-content {
            background-color: #2d3748;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.7);
            max-width: 600px;
            width: 90%;
            text-align: center;
            position: relative;
            border: 1px solid #4a5568;
        }
        .modal-close-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #a0aec0;
            cursor: pointer;
        }
        .modal-close-button:hover {
            color: #e2e8f0;
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #63b3ed;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 1rem auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .game-container {
                grid-template-columns: 1fr; /* Stack on smaller screens */
                padding: 1rem;
                gap: 1rem;
            }
            .sidebar {
                order: -1; /* Move sidebar to top on mobile */
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="main-content">
            <h1 class="text-3xl font-bold text-center text-blue-300 mb-4">Echoes of the Past</h1>
            <div class="room-display bg-gray-700 p-6 rounded-lg border border-gray-600">
                <h2 id="room-name" class="text-2xl font-semibold mb-2 text-blue-200"></h2>
                <p id="room-description" class="text-gray-300"></p>
            </div>

            <div class="interactive-elements grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="objects-in-room bg-gray-700 p-4 rounded-lg border border-gray-600">
                    <h3 class="section-title">Objects in Room:</h3>
                    <div id="objects-list">
                        <!-- Objects will be dynamically inserted here -->
                    </div>
                </div>

                <div class="exits-from-room bg-gray-700 p-4 rounded-lg border border-gray-600">
                    <h3 class="section-title">Exits:</h3>
                    <div id="exits-list" class="grid grid-cols-2 gap-2">
                        <!-- Exits will be dynamically inserted here -->
                    </div>
                </div>
            </div>

            <div class="message-log">
                <h3 class="section-title">Log:</h3>
                <div id="log-content">
                    <p class="text-gray-400">Welcome to Echoes of the Past. Explore the abandoned house and uncover its secrets.</p>
                </div>
            </div>

            <button id="conclude-button" class="button button-primary mt-4 hidden">Attempt to Conclude Story</button>
        </div>

        <div class="sidebar">
            <div class="clues-found bg-gray-800 p-4 rounded-lg border border-gray-700">
                <h3 class="section-title">Clues Found (<span id="clue-count">0</span>):</h3>
                <div id="clues-list">
                    <!-- Clues will be dynamically inserted here -->
                    <p class="text-gray-400 text-sm">No clues yet...</p>
                </div>
            </div>
        </div>
        <div class="col-span-full text-center text-gray-500 text-sm mt-4">
            © 2024 Deepak Yannadle. All rights reserved.
        </div>
    </div>

    <!-- Conclusion Modal -->
    <div id="conclusion-modal" class="modal">
        <div class="modal-content">
            <button class="modal-close-button" onclick="closeModal('conclusion-modal')">&times;</button>
            <h2 class="text-2xl font-bold mb-4 text-blue-200">Story Conclusion</h2>
            <div id="conclusion-loading" class="hidden">
                <div class="loading-spinner"></div>
                <p class="text-gray-300">Analyzing clues... Please wait.</p>
            </div>
            <div id="conclusion-result" class="text-gray-300 text-left max-h-80 overflow-y-auto">
                <!-- LLM generated conclusion will go here -->
            </div>
        </div>
    </div>

    <script type="module">
        // © 2024 Deepak Yannadle. All rights reserved.

        // Firebase configuration and initialization
        // These global variables are provided by the Canvas environment.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        let app;
        let db;
        let auth;
        let userId = 'anonymous'; // Default to anonymous
        let isAuthReady = false; // Flag to ensure auth is ready before Firestore ops

        // Initialize Firebase and set up authentication listener
        try {
            app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    console.log("Authenticated user ID:", userId);
                } else {
                    console.log("No user signed in. Attempting anonymous sign-in.");
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                            userId = auth.currentUser.uid;
                            console.log("Signed in with custom token. User ID:", userId);
                        } else {
                            await signInAnonymously(auth);
                            userId = auth.currentUser.uid;
                            console.log("Signed in anonymously. User ID:", userId);
                        }
                    } catch (error) {
                        console.error("Firebase Auth Error:", error);
                        addLogMessage("Authentication failed. Game may not save progress.", 'error');
                    }
                }
                isAuthReady = true;
                // Once auth is ready, initialize the game
                initGame();
            });
        } catch (error) {
            console.error("Failed to initialize Firebase:", error);
            addLogMessage("Firebase initialization failed. Game may not function correctly.", 'error');
            // Fallback to starting game without Firebase if init fails
            initGame();
        }

        // --- Game State Variables ---
        let houseLayout = {}; // Stores room objects
        let currentRoomId = 'foyer';
        let cluesFound = [];
        const MIN_CLUES_FOR_CONCLUSION = 3;

        // --- DOM Elements ---
        const roomNameEl = document.getElementById('room-name');
        const roomDescriptionEl = document.getElementById('room-description');
        const objectsListEl = document.getElementById('objects-list');
        const exitsListEl = document.getElementById('exits-list');
        const logContentEl = document.getElementById('log-content');
        const cluesListEl = document.getElementById('clues-list');
        const clueCountEl = document.getElementById('clue-count');
        const concludeButton = document.getElementById('conclude-button');
        const conclusionModal = document.getElementById('conclusion-modal');
        const conclusionLoading = document.getElementById('conclusion-loading');
        const conclusionResult = document.getElementById('conclusion-result');

        // --- Game Data (Pre-defined for generation) ---
        const ROOM_TYPES = [
            { id: 'foyer', name: 'Foyer', description: 'The grand entrance hall, dusty and silent. A large, ornate mirror hangs crookedly on one wall.' },
            { id: 'living_room', name: 'Living Room', description: 'A spacious living room, once elegant, now covered in white dust sheets. The air feels heavy.' },
            { id: 'kitchen', name: 'Kitchen', description: 'The kitchen, surprisingly well-preserved, though a thin layer of grime covers everything. A faint smell of decay lingers.' },
            { id: 'dining_room', name: 'Dining Room', description: 'A long dining table dominates the room, chairs askew. Dust motes dance in the slivers of light.' },
            { id: 'bedroom_master', name: 'Master Bedroom', description: 'A large bedroom with a four-poster bed. The curtains are drawn, plunging the room into gloom.' },
            { id: 'bedroom_guest', name: 'Guest Bedroom', description: 'A smaller bedroom, sparsely furnished. A child\'s drawing is pinned to the wall.' },
            { id: 'study', name: 'Study', description: 'A quiet study, lined with empty bookshelves. A heavy wooden desk sits in the center.' },
            { id: 'bathroom', name: 'Bathroom', description: 'A tiled bathroom, surprisingly clean, but with a faint, metallic scent.' },
            { id: 'hallway_upstairs', name: 'Upstairs Hallway', description: 'A long, narrow hallway connecting the upstairs rooms. Floorboards creak with every step.' },
            { id: 'basement', name: 'Basement', description: 'A dark, damp basement. The air is cold and still.' },
            { id: 'attic', name: 'Attic', description: 'The dusty attic, filled with forgotten trunks and discarded furniture. Cobwebs hang like shrouds.' }
        ];

        const FRAGMENTS = [
            { id: 'journal_entry_1', name: 'Dusty Journal', type: 'object', description: 'A leather-bound journal, its pages brittle with age. You can just make out a faded entry.', clue: 'A journal entry mentions "the argument" and "leaving everything behind."', roomHint: 'study' },
            { id: 'broken_locket', name: 'Broken Locket', type: 'object', description: 'A silver locket, snapped in half. Inside, two faded photographs.', clue: 'The locket contains photos of a young couple, but one is torn.', roomHint: 'bedroom_master' },
            { id: 'childs_toy', name: 'Child\'s Toy', type: 'object', description: 'A small, wooden toy soldier, lying on its side. It looks well-loved.', clue: 'A child\'s toy found in a room, suggesting a child lived here.', roomHint: 'bedroom_guest' },
            { id: 'empty_medicine_bottle', name: 'Empty Medicine Bottle', type: 'object', description: 'An empty, unlabeled medicine bottle. A faint, bitter smell emanates from it.', clue: 'An empty medicine bottle, possibly indicating illness or distress.', roomHint: 'bathroom' },
            { id: 'scorched_note', name: 'Scorched Note', type: 'object', description: 'A small piece of paper, partially burned. Only a few words are legible.', clue: 'A scorched note with the words "betrayal" and "never forgive" visible.', roomHint: 'living_room' },
            { id: 'faded_photograph', name: 'Faded Photograph', type: 'object', description: 'A sepia-toned photograph of a family picnic. Faces are blurred.', clue: 'A faded photograph of a family, but one figure is scratched out.', roomHint: 'dining_room' },
            { id: 'strange_drawing', name: 'Strange Drawing', type: 'object', description: 'A child\'s drawing of a house, but with dark, swirling lines around one window.', clue: 'A child\'s drawing depicting a house with a disturbing detail around a window.', roomHint: 'bedroom_guest' },
            { id: 'old_newspaper', name: 'Old Newspaper Clipping', type: 'object', description: 'A newspaper clipping from years ago, reporting a local disappearance.', clue: 'A newspaper clipping detailing a local disappearance from years ago.', roomHint: 'attic' },
            { id: 'hidden_compartment', name: 'Hidden Compartment', type: 'object', description: 'Behind a loose brick in the fireplace, you find a small, hidden compartment.', clue: 'A hidden compartment containing a single, tarnished key.', roomHint: 'living_room' },
            { id: 'dusty_letter', name: 'Dusty Letter', type: 'object', description: 'A sealed, dusty letter addressed to "My Dearest."', clue: 'A sealed letter mentioning a secret rendezvous and a difficult decision.', roomHint: 'study' },
            { id: 'broken_music_box', name: 'Broken Music Box', type: 'object', description: 'A delicate music box, broken open. Its mechanism is rusted.', clue: 'A broken music box that once played a lullaby, suggesting a lost innocence.', roomHint: 'bedroom_master' },
            { id: 'childs_shoe', name: 'Small Shoe', type: 'object', description: 'A single, small child\'s shoe, tucked under a bed.', clue: 'A single child\'s shoe, suggesting a hasty departure or loss.', roomHint: 'bedroom_guest' }
        ];

        // --- Utility Functions ---
        function addLogMessage(message, type = 'info') {
            const p = document.createElement('p');
            p.textContent = message;
            if (type === 'error') {
                p.classList.add('text-red-400');
            } else if (type === 'clue') {
                p.classList.add('text-green-400');
            } else {
                p.classList.add('text-gray-300');
            }
            logContentEl.prepend(p); // Add to top
            // Keep log from getting too long
            while (logContentEl.children.length > 10) {
                logContentEl.removeChild(logContentEl.lastChild);
            }
        }

        function showModal(modalId) {
            document.getElementById(modalId).classList.add('show');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        // --- Game Logic ---

        /**
         * Generates a procedural house layout.
         * @returns {Object} An object where keys are room IDs and values are room objects.
         */
        function generateHouseLayout() {
            const layout = {};
            const roomsToGenerate = [...ROOM_TYPES]; // Copy to avoid modifying original
            const numRooms = Math.min(ROOM_TYPES.length, 6 + Math.floor(Math.random() * 3)); // 6-8 rooms

            // Start with a foyer
            const foyer = roomsToGenerate.find(r => r.id === 'foyer');
            layout[foyer.id] = { ...foyer, exits: {}, objects: [] };
            let connectedRooms = [foyer.id];
            let availableRooms = roomsToGenerate.filter(r => r.id !== 'foyer');

            // Connect rooms
            for (let i = 0; i < numRooms - 1; i++) {
                if (availableRooms.length === 0) break;

                const newRoomIndex = Math.floor(Math.random() * availableRooms.length);
                const newRoom = availableRooms.splice(newRoomIndex, 1)[0];
                layout[newRoom.id] = { ...newRoom, exits: {}, objects: [] };

                // Connect to a random existing room
                const existingRoomId = connectedRooms[Math.floor(Math.random() * connectedRooms.length)];
                const existingRoom = layout[existingRoomId];

                // Determine directions (simple for now: N, S, E, W, Up, Down)
                const directions = ['north', 'south', 'east', 'west', 'up', 'down'];
                let dir1 = directions[Math.floor(Math.random() * directions.length)];
                let dir2 = '';
                // Ensure opposite direction exists for return path
                if (dir1 === 'north') dir2 = 'south';
                else if (dir1 === 'south') dir2 = 'north';
                else if (dir1 === 'east') dir2 = 'west';
                else if (dir1 === 'west') dir2 = 'east';
                else if (dir1 === 'up') dir2 = 'down';
                else if (dir1 === 'down') dir2 = 'up';

                existingRoom.exits[dir1] = newRoom.id;
                layout[newRoom.id].exits[dir2] = existingRoomId;

                connectedRooms.push(newRoom.id);
            }

            // Ensure all selected rooms are connected (simple check, could be more robust)
            // For this version, we assume the random connection process will generally work.
            // A more robust solution would involve a graph traversal (BFS/DFS) to ensure connectivity.

            return layout;
        }

        /**
         * Places story fragments (objects) into the generated house.
         */
        function placeStoryFragments() {
            const roomIds = Object.keys(houseLayout);
            const placedFragmentIds = new Set();

            // Place critical fragments first if they have room hints
            FRAGMENTS.forEach(fragment => {
                if (fragment.roomHint && roomIds.includes(fragment.roomHint) && !placedFragmentIds.has(fragment.id)) {
                    houseLayout[fragment.roomHint].objects.push(fragment);
                    placedFragmentIds.add(fragment.id);
                }
            });

            // Place remaining fragments randomly in available rooms
            FRAGMENTS.forEach(fragment => {
                if (!placedFragmentIds.has(fragment.id)) {
                    const randomRoomId = roomIds[Math.floor(Math.random() * roomIds.length)];
                    houseLayout[randomRoomId].objects.push(fragment);
                    placedFragmentIds.add(fragment.id);
                }
            });
        }

        /**
         * Renders the current room's information to the UI.
         */
        function renderRoom() {
            const room = houseLayout[currentRoomId];
            if (!room) {
                addLogMessage("Error: Room not found!", 'error');
                return;
            }

            roomNameEl.textContent = room.name;
            roomDescriptionEl.textContent = room.description;

            // Clear previous objects and exits
            objectsListEl.innerHTML = '';
            exitsListEl.innerHTML = '';

            // Render objects
            if (room.objects && room.objects.length > 0) {
                room.objects.forEach(obj => {
                    const div = document.createElement('div');
                    div.classList.add('object-item');
                    div.innerHTML = `
                        <span>${obj.name}</span>
                        <button class="button button-secondary text-sm" data-object-id="${obj.id}">Examine</button>
                    `;
                    objectsListEl.appendChild(div);
                });
            } else {
                objectsListEl.innerHTML = '<p class="text-gray-400 text-sm">No notable objects here.</p>';
            }

            // Render exits
            if (Object.keys(room.exits).length > 0) {
                for (const direction in room.exits) {
                    const button = document.createElement('button');
                    button.classList.add('button', 'button-secondary');
                    button.textContent = `Go ${direction.charAt(0).toUpperCase() + direction.slice(1)}`;
                    button.dataset.direction = direction;
                    exitsListEl.appendChild(button);
                }
            } else {
                exitsListEl.innerHTML = '<p class="text-gray-400 text-sm">No obvious exits.</p>';
            }

            // Update clue count and button visibility
            clueCountEl.textContent = cluesFound.length;
            if (cluesFound.length >= MIN_CLUES_FOR_CONCLUSION) {
                concludeButton.classList.remove('hidden');
            } else {
                concludeButton.classList.add('hidden');
            }

            addLogMessage(`You are in the ${room.name}.`);
        }

        /**
         * Handles examining an object in the current room.
         * @param {string} objectId The ID of the object to examine.
         */
        function examineObject(objectId) {
            const room = houseLayout[currentRoomId];
            const object = room.objects.find(obj => obj.id === objectId);

            if (object) {
                addLogMessage(`You examine the ${object.name}. ${object.description}`);
                if (object.clue && !cluesFound.some(c => c.id === object.id)) {
                    addClue(object);
                    addLogMessage(`You found a clue: "${object.clue}"`, 'clue');
                }
            } else {
                addLogMessage("You can't examine that.", 'error');
            }
        }

        /**
         * Adds a clue to the cluesFound array and updates the UI.
         * @param {Object} clueObject The fragment object that provides the clue.
         */
        function addClue(clueObject) {
            // Ensure unique clues
            if (!cluesFound.some(c => c.id === clueObject.id)) {
                cluesFound.push({ id: clueObject.id, text: clueObject.clue });
                renderClues(); // Update sidebar
                clueCountEl.textContent = cluesFound.length; // Update count
                if (cluesFound.length >= MIN_CLUES_FOR_CONCLUSION) {
                    concludeButton.classList.remove('hidden');
                }
            }
        }

        /**
         * Renders the list of found clues in the sidebar.
         */
        function renderClues() {
            cluesListEl.innerHTML = '';
            if (cluesFound.length === 0) {
                cluesListEl.innerHTML = '<p class="text-gray-400 text-sm">No clues yet...</p>';
                return;
            }
            cluesFound.forEach(clue => {
                const div = document.createElement('div');
                div.classList.add('clue-item');
                div.innerHTML = `<span>"${clue.text}"</span>`;
                cluesListEl.appendChild(div);
            });
        }

        /**
         * Moves the player to a new room.
         * @param {string} direction The direction to move (e.g., 'north', 'south').
         */
        function moveRoom(direction) {
            const currentRoom = houseLayout[currentRoomId];
            const nextRoomId = currentRoom.exits[direction];

            if (nextRoomId && houseLayout[nextRoomId]) {
                currentRoomId = nextRoomId;
                renderRoom();
            } else {
                addLogMessage(`You can't go ${direction} from here.`, 'error');
            }
        }

        /**
         * Attempts to generate a conclusion using the LLM.
         */
        async function attemptConclusion() {
            showModal('conclusion-modal');
            conclusionLoading.classList.remove('hidden');
            conclusionResult.innerHTML = ''; // Clear previous results

            if (cluesFound.length < MIN_CLUES_FOR_CONCLUSION) {
                conclusionResult.innerHTML = '<p class="text-red-400">You need to find more clues before attempting a conclusion!</p>';
                conclusionLoading.classList.add('hidden');
                return;
            }

            const clueTexts = cluesFound.map(c => c.text).join('\n- ');
            const prompt = `Based on the following fragmented clues found in an abandoned house, provide a plausible, concise narrative interpretation of what might have happened. Focus on connecting the clues into a coherent story, even if some details are left to interpretation. The story should be mysterious and slightly melancholic.

Clues:
- ${clueTexts}`;

            addLogMessage("Attempting to piece together the story...", 'info');

            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ""; // Canvas will provide this at runtime
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`API error: ${response.status} - ${errorData.error.message}`);
                }

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    conclusionResult.innerHTML = `<p>${text.replace(/\n/g, '<br>')}</p>`;
                    addLogMessage("Conclusion generated!", 'clue');
                } else {
                    conclusionResult.innerHTML = '<p class="text-red-400">Could not generate a conclusion based on the clues. Try finding more.</p>';
                    addLogMessage("Failed to generate conclusion.", 'error');
                }
            } catch (error) {
                console.error("Error calling LLM API:", error);
                conclusionResult.innerHTML = `<p class="text-red-400">An error occurred while trying to interpret the story: ${error.message}. Please try again.</p>`;
                addLogMessage(`Error during conclusion: ${error.message}`, 'error');
            } finally {
                conclusionLoading.classList.add('hidden');
            }
        }

      
         * Initializes the game: generates house, places fragments, renders first room.
        
        function initGame() {
            houseLayout = generateHouseLayout();
            placeStoryFragments();
            currentRoomId = 'foyer'; // Always start in the foyer
            cluesFound = []; // Reset clues for new game
            renderRoom();
            renderClues();
            addLogMessage("Game started. Explore the house!", 'info');
        }

        // --- Event Listeners ---
        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('button-secondary') && event.target.dataset.objectId) {
                examineObject(event.target.dataset.objectId);
            } else if (event.target.classList.contains('button-secondary') && event.target.dataset.direction) {
                moveRoom(event.target.dataset.direction);
            }
        });

        concludeButton.addEventListener('click', attemptConclusion);

        // Initial game setup is called after Firebase auth is ready
        // (or immediately if Firebase fails to initialize).
        // The onAuthStateChanged listener handles calling initGame.
    </script>
</body>
</html>
